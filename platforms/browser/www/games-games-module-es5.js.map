{"version":3,"sources":["webpack:///src/app/pages/home/games/games.page.html","webpack:///src/app/pages/home/games/games-routing.module.ts","webpack:///src/app/pages/home/games/games.module.ts","webpack:///src/app/pages/home/games/games.page.ts"],"names":["routes","path","component","GamesPageRoutingModule","imports","forChild","exports","GamesPageModule","declarations","GamesPage","request","util","list","tabs","listSkeleton","Array","firstLoad","modelGame","init","event","api_function","subscribe","response","selectFirst","target","complete","console","log","error","length","tab","tabSelected","delay","focusSegment","index","parseInt","detail","value","segmentId","document","getElementById","scrollIntoView","behavior","block","inline","ms","Promise","resolve","setTimeout","val","locale","format","selector","template"],"mappings":"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","file":"games-games-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>Partidos</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <div *ngIf=\\\"!firstLoad\\\">\\n    <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"init($event)\\\">\\n      <ion-refresher-content></ion-refresher-content>\\n    </ion-refresher>\\n  \\n    <ion-list>\\n  \\n      <ion-grid>\\n        <ion-row>\\n          <ion-col size=\\\"12\\\">\\n            <ion-segment scrollable [(ngModel)]=\\\"tabSelected\\\" (ionChange)=\\\"selectDate($event)\\\" >\\n              <ion-segment-button *ngFor=\\\"let tab of tabs;let i=index\\\" value=\\\"{{i}}\\\" id=\\\"sgm_{{i}}\\\" >\\n                {{formatDate(tab.date)}}\\n              </ion-segment-button>\\n            </ion-segment>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n  \\n      <ion-list-header *ngIf=\\\"list.length == 0\\\"  color=\\\"tertiary\\\">\\n        <ion-label>Sin registros</ion-label>\\n      </ion-list-header>\\n\\n      <app-game-list \\n        *ngFor=\\\"let game of list\\\"\\n        [game]=\\\"game\\\"  \\n        routerLink=\\\"/games/profile/{{game.id}}\\\" \\n        routerDirection=\\\"forward\\\"\\n      >\\n      </app-game-list>\\n  \\n      <!-- <ion-item *ngFor=\\\"let game of list\\\" routerLink=\\\"/games/profile/{{game.id}}\\\" routerDirection=\\\"forward\\\" >\\n        <div class=\\\"game\\\">\\n          <div class=\\\"team-list contenedor\\\">\\n            <div class=\\\"team\\\">\\n              <span class=\\\"team-name\\\">{{game.team_l.name}}</span>\\n              <ion-thumbnail slot=\\\"end\\\">\\n                <ion-img \\n                  class=\\\"img-team\\\"\\n                  [src]=\\\"game.team_l.shield ? game.team_l.shield.urlComplete : 'assets/images/shield_team.png'\\\">\\n                </ion-img>\\n              </ion-thumbnail>\\n            </div>\\n  \\n            <div class=\\\"vs\\\">vs</div>\\n  \\n            <div class=\\\"team\\\">\\n              <span class=\\\"team-name\\\">{{game.team_v.name}}</span>\\n              <ion-thumbnail slot=\\\"start\\\">\\n                <ion-img \\n                  class=\\\"img-team\\\"\\n                  [src]=\\\"game.team_v.shield ? game.team_v.shield.urlComplete : 'assets/images/shield_team.png'\\\"\\n                  >\\n                </ion-img>\\n              </ion-thumbnail>\\n            </div>\\n          </div>\\n          <div class=\\\"date \\\">\\n            <span>{{ util.formatHours(game.time) }}</span>\\n          </div>\\n        </div>\\n      </ion-item> -->\\n    </ion-list>\\n  </div>\\n  \\n  <div *ngIf=\\\"firstLoad\\\">\\n    <ion-grid>\\n      <ion-row>\\n        <ion-col>  <ion-skeleton-text animated style=\\\"width: 100% ; height: 30px;\\\"></ion-skeleton-text> </ion-col>\\n        <ion-col>  <ion-skeleton-text animated style=\\\"width: 100% ; height: 30px;\\\"></ion-skeleton-text> </ion-col>\\n        <ion-col>  <ion-skeleton-text animated style=\\\"width: 100% ; height: 30px;\\\"></ion-skeleton-text> </ion-col>\\n      </ion-row>\\n    </ion-grid>\\n\\n    <ion-card *ngFor=\\\"let i of listSkeleton\\\">\\n      <div class=\\\"ion-padding custom-skeleton\\\">\\n        <div class=\\\"game\\\">\\n          <div class=\\\"team-list contenedor\\\">\\n            <div class=\\\"team\\\">\\n              <ion-skeleton-text animated style=\\\"width: 80%\\\"></ion-skeleton-text>\\n              <ion-avatar slot=\\\"start\\\">\\n                <ion-skeleton-text animated></ion-skeleton-text>\\n              </ion-avatar>\\n            </div>\\n  \\n            <div class=\\\"vs\\\">\\n              <ion-skeleton-text animated style=\\\"width: 20px\\\"></ion-skeleton-text>\\n            </div>\\n  \\n            <div class=\\\"team\\\">\\n              <ion-skeleton-text animated style=\\\"width: 80%\\\"></ion-skeleton-text>\\n              <ion-avatar slot=\\\"start\\\">\\n                <ion-skeleton-text animated></ion-skeleton-text>\\n              </ion-avatar>\\n            </div>\\n          </div>\\n          <div class=\\\"date ion-text-center\\\"  style=\\\"width: 100%\\\">\\n            <ion-skeleton-text animated style=\\\"width: 80px;margin: auto;\\\"></ion-skeleton-text>\\n          </div>\\n        </div>\\n      </div>\\n    </ion-card>\\n  </div>\\n\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { GamesPage } from './games.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: GamesPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class GamesPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { GamesPageRoutingModule } from './games-routing.module';\n\nimport { GamesPage } from './games.page';\nimport {ComponentsModule} from '../../../components/components.module';\nimport { from } from 'rxjs';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    GamesPageRoutingModule,\n    ComponentsModule\n  ],\n  declarations: [GamesPage]\n})\nexport class GamesPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Model } from 'src/app/api/models/model';\nimport { RequestService } from 'src/app/api/request.service';\nimport { UtilService } from 'src/app/services/util.service';\nimport * as moment from 'moment';\n\n\n@Component({\n  selector: 'app-games',\n  templateUrl: './games.page.html',\n  styleUrls: ['./games.page.scss'],\n})\nexport class GamesPage implements OnInit {\n\n  public modelGame  : Model;\n  public list = [];\n  public tabs = []\n  public tabSelected :any;\n  public lastFocusSegment : any;\n\n  public listSkeleton = new Array(3)\n  public firstLoad = true;\n\n  constructor(\n    public request : RequestService,\n    public util : UtilService\n  ) {\n    this.modelGame = new Model('Game',request);\n\n   }\n\n  ngOnInit() {\n    this.init();\n  }\n\n  async init(event = null){\n    /*this.modelGame.api_function('games').subscribe(data => {\n      if(data['status'] = 'success'){\n        this.list = data['data'];\n        if(event)\n          event.target.complete();\n      }\n    })\n    */\n  \n    this.modelGame.api_function('pageHomeGames').subscribe(\n      response => {\n        if(response['status'] == 'success'){\n          this.tabs = response['data']['dates'];\n          this.selectFirst();\n        }\n        if(event)\n          event.target.complete()\n        console.log(response)\n        this.firstLoad = false;\n\n      },\n      error => {\n        if(event)\n          event.target.complete()\n        console.error(error)\n        this.firstLoad = false;\n\n      }\n    )\n\n  }\n\n  async selectFirst(){\n    if(this.tabs.length > 0){\n      let tab = this.tabs[0];\n      this.list = tab['results']\n      this.tabSelected = 0\n      await this.delay( 1500 )\n      this.focusSegment()\n      //this.selectDate(tab['date']);\n    }\n  }\n\n  selectDate(event){\n    let index = parseInt( event.detail.value );\n\n    let tab = this.tabs[index];\n\n    if(tab && tab['results']){\n      this.list = tab['results']\n      this.focusSegment()\n      return;\n    }\n    this.modelGame.api_function('gamesByDate',{'date' : tab['date']}).subscribe(\n      response => {\n        if(response['status'] == 'success'){\n          this.tabs[index]['results'] = response['data']\n          this.list = this.tabs[index]['results'];\n          this.focusSegment()\n        }\n        console.log(response);\n      },\n      error => {\n        console.error(error);\n      }\n    )\n\n  }\n\n  focusSegment() {\n    let segmentId = 'sgm_' + this.tabSelected;\n    console.log('select segment : ', segmentId)\n    document.getElementById(segmentId).scrollIntoView({ \n      behavior: 'smooth',\n      block: 'center',\n      inline: 'center'\n    });\n  }\n\n  \n  delay(ms: number) {\n    return new Promise( resolve => setTimeout(resolve, ms) );\n  }\n\n  formatDate(val){\n    return moment(val).locale('es').format('DD MMMM YYYY')\n  }\n\n}\n"]}